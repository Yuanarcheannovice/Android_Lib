apply plugin: 'com.android.library'
// 谷歌浏览器内核
//crosswalkwebview23535894arm
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2
        versionName "1.0.2"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    lintOptions {
        abortOnError false
    }

}

dependencies {
    api files('libs/xwalk_core_library.jar')
}

//上传github 作为maven仓库
apply plugin: 'maven'


uploadArchives {
    repositories.mavenDeployer {
        repository(url: uri(rootProject.ext.maven_url))
        pom.project {
            groupId rootProject.ext.groupId// 唯一标识（通常为模块包名，也可以任意）
            artifactId project.name// 项目名称（通常为类库模块名称，也可以任意）
            version project.android.defaultConfig.versionName // 版本号
        }
    }
    //写入版本号
    def xmlFile = new File(uri(rootProject.ext.version_url))

    def xmlObj = new XmlParser().parse(xmlFile)

    println(">---wirte "+project.name+" version begin-------")
    println(">---file url:" + xmlFile.absolutePath)
    def oldVersion

    def versionObj = xmlObj.get(project.name)
    if (versionObj instanceof List) {
        List versionObjs = xmlObj.get(project.name)
        if (versionObjs.size() > 0) {
            //修改节点
            oldVersion = xmlObj.get(project.name)[0].attributes().get("value")
            xmlObj.get(project.name)[0].attributes().put("value", project.android.defaultConfig.versionName)

        } else {
            //新建节点
            oldVersion="0"
            Map<String, String> map = new HashMap<>()
            map.put("value", project.android.defaultConfig.versionName)
            xmlObj.appendNode(project.name, map)
        }
    }

    println(">---" + oldVersion + "  --> " + xmlObj.get(project.name)[0].attributes().get("value"))
    println(">---wirte lib version end-------")
    //写入文件
    new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile))).print(xmlObj)
}

// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    options.encoding = "UTF-8"
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
